plugins {
    id 'java'
    id 'idea'

    // Depend on Spring Boot and add the Gradle plugin
    // https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/html/
    id 'org.springframework.boot' version "2.6.5"
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'

    // Linter and code formatter -- https://github.com/diffplug/spotless
    id "com.diffplug.spotless" version "6.2.0"

    id 'jacoco'
    id 'com.kageiit.jacobo' version '2.1.0'
}

group 'com.wheel.labsv2'
version '1.0-SNAPSHOT'

compileJava {
    sourceCompatibility = 11
    targetCompatibility = 11
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    maven {
        url "https://maven-central.storage-download.googleapis.com/maven2/"
    }
    maven {
        url "https://www.mvnrepository.com"
    }
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

spotless {

    java {
        target '**/*.java'

        eclipse().configFile rootProject.file('formatter-rules.xml')
        removeUnusedImports()
        trimTrailingWhitespace()
    }
}

dependencies {
    compileOnly 'com.diffplug.spotless:spotless-plugin-gradle:6.2.0'

    // @Nullable and @NotNull intellij annotations
    compileOnly 'org.jetbrains:annotations:19.0.0'
    testCompileOnly 'org.jetbrains:annotations:19.0.0'

    // Basic app set up, web server, and DB wrappers
    implementation 'org.springframework.boot:spring-boot-dependencies:2.6.5'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.6.5'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.6.5'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc:2.6.5'
    implementation 'org.springframework.boot:spring-boot-starter-logging:2.6.5'

    // Spring security
    implementation 'org.springframework.security:spring-security-web:5.6.2'
    implementation 'org.springframework.boot:spring-boot-starter-security:2.6.5'

    // AWS APIs
    implementation 'com.amazonaws:aws-java-sdk:1.12.136'
    implementation platform('com.amazonaws:aws-java-sdk-bom:1.12.136')

    // Better Logging
    implementation 'ch.qos.logback.contrib:logback-json-classic:0.1.5'
    implementation 'ch.qos.logback.contrib:logback-jackson:0.1.5'

    // Stats and alerting
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.6.5'

    // For sending emails
    implementation 'com.sun.mail:javax.mail:1.6.2'

    // Utilities that are helpful.
    implementation 'org.apache.commons:commons-imaging:1.0-alpha2'
    implementation 'org.apache.commons:commons-lang3:3.11'
    implementation 'org.apache.commons:commons-text:1.9'
    implementation 'commons-io:commons-io:2.8.0'
    implementation 'javax.inject:javax.inject:1'
    implementation 'commons-beanutils:commons-beanutils:1.9.4'

    // Utility for lenient datetime parsing
    implementation 'com.joestelmach:natty:0.13'

    // Hot swaps 'n stuff
    developmentOnly 'org.springframework.boot:spring-boot-devtools:2.6.5'

    // Persistence & Hibernate
    implementation 'org.hibernate:hibernate-core:5.6.7.Final'
    implementation 'org.postgresql:postgresql:42.3.3'

    // Generates swagger docs for REST APIs
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.6'
    implementation 'io.swagger:swagger-annotations:1.5.22'

    // Testing Support
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.5'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
    testImplementation 'org.awaitility:awaitility:4.1.0'
    testImplementation 'com.github.java-json-tools:json-schema-validator:2.2.14'

    // DB used in testing. In-memory SQL implementation
    implementation 'com.h2database:h2:1.4.197'

    // Freemarker for rendering templates
    implementation 'org.springframework.boot:spring-boot-starter-freemarker:2.6.5'

    components {
        withModule('org.springframework:spring-beans') {
            allVariants {
                withDependencyConstraints {
                    // Need to patch constraints because snakeyaml is an optional dependency
                    it.findAll { it.name == 'snakeyaml' }.each { it.version { strictly '1.19' } }
                }
            }
        }
    }
}

bootJar {
    mainClass = 'com.wheel.labsv2.LabsV2Application'
}

test {
    useJUnitPlatform()
    filter {
        excludeTestsMatching "com.wheel.labsv2.integration.*"
    }
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    jacoco {
        excludes = []
    }
    systemProperty 'java.awt.headless', 'true'
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}
jacocoTestReport.dependsOn("test")

import com.kageiit.jacobo.JacoboTask
tasks.create("jacobo", JacoboTask, {
    it.jacocoReport = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    it.coberturaReport = file("${project.buildDir}/reports/cobertura/cobertura.xml")
    it.srcDirs = sourceSets.main.java.srcDirs

}).dependsOn(jacocoTestReport)

compileJava.dependsOn 'spotlessApply'

task run(type: JavaExec) {
    group = 'Run'
    description = 'Run the server main method as an application in development mode'
    classpath sourceSets.main.runtimeClasspath
    main = 'com.wheel.labsv2.LabsV2Application'
    systemProperty "spring.profiles.active", "development"
    systemProperty 'java.awt.headless', 'true'
}

task runStaging(type: JavaExec) {
    group = 'Run'
    description = 'Run the server main method as an application in staging mode'
    classpath sourceSets.main.runtimeClasspath
    main = 'com.wheel.labsv2.LabsV2Application'
    systemProperty "spring.profiles.active", "staging"
    systemProperty 'java.awt.headless', 'true'
}

task generateSwaggerMarkup(type: JavaExec) {
    classpath = files("scripts/swagger2markup/swagger2markup-cli-1.3.1.jar")
    args = [
            "convert",
            "-i",
            "${buildDir}/swagger.json",
            "-f",
            "${buildDir}/asciidoc/swagger"
    ]
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    filter {
        includeTestsMatching "com.wheel.labsv2.integration.*"
    }
    jacoco {
        excludes = []
    }
    systemProperty "spring.profiles.active", "integration-test"
    systemProperty 'java.awt.headless', 'true'
}

task all {
    dependsOn 'build'
    dependsOn 'integrationTest'
}
